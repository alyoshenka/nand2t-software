function CircGame.new 0
push constant 8
call Memory.alloc 1
pop pointer 0
push constant 5
pop this 0
push constant 10
pop this 2
push constant 0
pop this 3
push constant 5
pop this 4
push constant 10
pop this 5
push constant 50
pop this 6
push this 4
call Array.new 1
pop this 7
push pointer 0
return
function CircGame.dispose 1
push argument 0
pop pointer 0
push this 3
push constant 1
sub
pop this 3
label WHILE_EXP0
push this 3
push constant 0
gt
push this 3
or
push constant 0
eq
not
if-goto WHILE_END0
push this 3
push this 7
add
pop pointer 1
push that 0
pop local 0
push local 0
call Square.dispose 1
pop temp 0
push this 3
push constant 1
sub
pop this 3
goto WHILE_EXP0
label WHILE_END0
push this 7
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function CircGame.update 2
push argument 0
pop pointer 0
push this 3
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 1
sub
push this 7
add
pop pointer 1
push that 0
pop local 1
push local 1
push this 0
push argument 1
call Math.multiply 2
push this 0
push argument 1
call Math.multiply 2
call Square.update 3
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function CircGame.draw 2
push argument 0
pop pointer 0
push this 3
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 1
sub
push this 7
add
pop pointer 1
push that 0
pop local 1
push local 1
call Square.draw 1
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function CircGame.incSpeed 1
push argument 0
pop pointer 0
push this 0
push this 0
push this 1
add
call Math.min 2
pop local 0
push local 0
pop this 0
push constant 0
return
function CircGame.decSpeed 0
push argument 0
pop pointer 0
push constant 0
push this 0
push this 1
add
call Math.max 2
pop this 0
push constant 0
return
function CircGame.incObjects 1
push argument 0
pop pointer 0
push this 3
push this 4
eq
push this 3
or
push this 4
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
push constant 0
push this 2
call Square.new 3
pop local 0
push this 3
push this 7
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 3
push constant 1
add
pop this 3
push constant 0
return
function CircGame.decObjects 1
push argument 0
pop pointer 0
push this 3
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 3
push constant 1
sub
push this 7
add
pop pointer 1
push that 0
pop local 0
push local 0
call Square.dispose 1
pop temp 0
push this 3
push constant 1
sub
pop this 3
push constant 0
return
